"""
Generate the code reference pages and navigation.
"""

from pathlib import Path
import os
import mkdocs_gen_files
import sys

nav = mkdocs_gen_files.Nav()

# Project folders annotator and augmentator should be either inside docs/apps or at the same level as docs
root_code_dir = None

if all([project_name in os.listdir(Path(__file__).parent.parent.parent) for project_name in ["annotator","augmentator"]]):
    root_code_dir = Path(__file__).parent.parent.parent.resolve()
elif all([project_name in os.listdir(Path(__file__).parent.parent.joinpath("apps")) for project_name in ["annotator","augmentator"]]):
    root_code_dir = Path(__file__).parent.parent.joinpath("apps").resolve()
    
if root_code_dir is None:
    raise Exception(f"Root code dir not found: {root_code_dir}")

sys.path.insert(0, str(root_code_dir.parent))

all_paths = []
for path in sorted(Path(root_code_dir).rglob("*.py")):
    if not any([excluded_path in path.__str__() for excluded_path in ["__","/_","docs/"]]):
        all_paths.append(path)


for path in all_paths:
    module_path = path.relative_to(root_code_dir).with_suffix("")
    doc_path = path.relative_to(root_code_dir).with_suffix(".md")
    full_doc_path = Path("codebase", doc_path)

    parts = tuple(module_path.parts)

    nav[parts] = doc_path.as_posix()

    with mkdocs_gen_files.open(full_doc_path, "w") as fd:
        ident = ".".join(parts)
        module_name = parts[-1].replace('_', ' ').title()
        fd.write(f"# {module_name}\n\n------\n\n::: {root_code_dir}.{ident}")

    mkdocs_gen_files.set_edit_path(full_doc_path, path)


with mkdocs_gen_files.open("codebase/CODE_INDEX.md", "w") as nav_file:  #
    if os.path.exists(root_code_dir):
        nav_file.writelines(nav.build_literate_nav())  #
    else:
        nav_file.writelines(["DO NOT EDIT OR REMOVE: here will be written the code documentation generated by mkdocstrings"])